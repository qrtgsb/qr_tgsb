from aiogram import types
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from loader import dp
from states import LocationStates
from config import TARGET_LOCATION, LOCATION_RADIUS_KM
from db import get_employee_by_telegram_id, mark_attendance
from geo import haversine
import time
from config import ADMIN_ID


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ /start
user_timestamps = {}

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    user_timestamps[user_id] = time.time()

    employee = get_employee_by_telegram_id(user_id)
    if employee:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
        keyboard.add(button)
        await LocationStates.waiting_for_location.set()
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—Ö–æ–¥–∞:", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@dp.message_handler(content_types=types.ContentType.LOCATION, state=LocationStates.waiting_for_location)
async def location_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    employee = get_employee_by_telegram_id(user_id)

    if not employee:
        await message.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–º–µ—Ç–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        await state.finish()
        return

    lat = message.location.latitude
    lon = message.location.longitude
    accuracy = getattr(message.location, "horizontal_accuracy", None)

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ GPS
    if accuracy is None:
        await message.answer("‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏. –í–∫–ª—é—á–∏—Ç–µ GPS –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.finish()
        return

    if accuracy > 500:  # ‚Üê –¢–í–û–ô –õ–ò–ú–ò–¢
        await message.answer(f"‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –Ω–µ—Ç–æ—á–Ω–∞—è ({accuracy:.1f} –º). –í—Ö–æ–¥ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω.")
        await state.finish()
        return

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ (–ª–∏–º–∏—Ç 60 —Å–µ–∫—É–Ω–¥)
    sent_at = user_timestamps.get(user_id, 0)
    now = time.time()
    if now - sent_at > 60:
        await message.answer("‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞. –í—Ö–æ–¥ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω.")
        await state.finish()
        return

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –æ–±—ä–µ–∫—Ç–∞
    target_lat, target_lon = TARGET_LOCATION
    distance = haversine(lat, lon, target_lat, target_lon)

    if distance > LOCATION_RADIUS_KM:
        await message.answer(f"‚ùå –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –æ–±—ä–µ–∫—Ç–∞ ({distance:.1f} –∫–º). –í—Ö–æ–¥ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω.", reply_markup=ReplyKeyboardRemove())
        await state.finish()
        return

    # ‚úÖ –í—Å—ë –ø—Ä–æ—à–ª–æ ‚Äî –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥
    mark_attendance(employee[0], lat, lon)

    # üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –∞–¥–º–∏–Ω—É
    full_name = employee[3]  # –µ—Å–ª–∏ –§–ò–û ‚Äî 4-–π —Å—Ç–æ–ª–±–µ—Ü
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())

    report = (
        f"üì• –í—Ö–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n"
        f"üë§ {full_name}\n"
        f"üïí {timestamp}\n"
        f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.5f}, {lon:.5f}\n"
        f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f} –º\n"
        f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.2f} –∫–º"
    )

    await message.answer(
        f"‚úÖ –í—Ö–æ–¥ –∑–∞—Å—á–∏—Ç–∞–Ω. –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f} –º, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.1f} –∫–º",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.bot.send_message(ADMIN_ID, report)
    await state.finish()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç
async def request_location(message: types.Message, employee):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button = types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    keyboard.add(button)
    await LocationStates.waiting_for_location.set()
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—Ö–æ–¥–∞:", reply_markup=keyboard)

from aiogram import types
from aiogram.dispatcher import FSMContext
from states import LocationStates
from db import get_employee_by_full_name, update_employee_telegram_id, get_employee_by_telegram_id, mark_attendance
from config import ADMIN_ID

def register(dp):
    @dp.message_handler(state=LocationStates.waiting_for_employee)
    async def handle_employee_selection(message: types.Message, state: FSMContext):
        full_name = message.text.strip()
        employee = get_employee_by_full_name(full_name)

        if not employee:
            await message.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        update_employee_telegram_id(employee[0], message.from_user.id)

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
        keyboard.add(button)
        await LocationStates.waiting_for_location.set()
        await message.answer("‚úÖ –í—ã–±—Ä–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=keyboard)

    @dp.message_handler(content_types=types.ContentType.LOCATION, state=LocationStates.waiting_for_location)
    async def handle_location(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        employee = get_employee_by_telegram_id(user_id)

        if not employee and user_id != ADMIN_ID:
            await message.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–º–µ—Ç–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
            await state.finish()
            return

        emp_id = employee[0] if employee else "ADMIN"
        lat = message.location.latitude
        lon = message.location.longitude

        mark_attendance(emp_id, lat, lon)
        await message.answer("‚úÖ –û—Ç–º–µ—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        await state.finish()

