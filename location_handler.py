from aiogram import types
from aiogram.dispatcher import FSMContext
from states import LocationStates
from db import (
    search_employees_by_name,
    update_employee_telegram_id,
    get_employee_by_telegram_id,
    mark_attendance,
    is_within_radius
)
from config import ADMIN_ID

OFFICE_LOCATION = (43.270355, 68.285416)  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ñ–∏—Å–∞

def register(dp):
    @dp.message_handler(state=LocationStates.waiting_for_employee_search)
    async def handle_name_search(message: types.Message, state: FSMContext):
        query = message.text.strip()
        matches = search_employees_by_name(query)

        if not matches:
            await message.answer("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for emp_id, full_name in matches:
            keyboard.add(types.KeyboardButton(full_name))

        await state.update_data(matches={full_name: emp_id for emp_id, full_name in matches})
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
        await LocationStates.waiting_for_employee_selection.set()

    @dp.message_handler(state=LocationStates.waiting_for_employee_selection)
    async def handle_employee_selection(message: types.Message, state: FSMContext):
        def normalize(text):
            return text.strip().lower().replace("—ë", "–µ")

        selected_name = normalize(message.text)
        data = await state.get_data()
        raw_matches = data.get("matches", {})

        matches = {normalize(name): emp_id for name, emp_id in raw_matches.items()}
        emp_id = matches.get(selected_name)

        if not emp_id:
            await message.answer("‚ùå –ò–º—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –∑–∞–Ω–æ–≤–æ:")
            await LocationStates.waiting_for_employee_search.set()
            return

        update_employee_telegram_id(emp_id, message.from_user.id)

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
        keyboard.add(button)
        await LocationStates.waiting_for_location.set()
        await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—Ö–æ–¥–∞:", reply_markup=keyboard)

    @dp.message_handler(content_types=[types.ContentType.LOCATION, types.ContentType.VENUE], state=LocationStates.waiting_for_location)
    async def handle_location(message: types.Message, state: FSMContext):
        location = message.location or (message.venue.location if message.venue else None)

        if not location:
            await message.answer("‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ GPS –≤–∫–ª—é—á—ë–Ω –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
            return

        user_id = message.from_user.id
        employee = get_employee_by_telegram_id(user_id)

        emp_id = employee[0] if employee else f"UNKNOWN_{user_id}"
        full_name = employee[1] if employee else f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({user_id})"
        user_location = (location.latitude, location.longitude)

        within_zone = is_within_radius(user_location, OFFICE_LOCATION)

        # ‚úÖ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–º–µ—Ç–∫—É –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∑–æ–Ω—ã
        mark_attendance(emp_id, *user_location)

        if within_zone:
            await message.answer("‚úÖ –û—Ç–º–µ—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            await state.finish()
        else:
            # ‚ùå –í–Ω–µ –∑–æ–Ω—ã ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            button = types.KeyboardButton("üìç –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
            keyboard.add(button)

            await message.answer(
                "‚ö†Ô∏è –í—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –∑–æ–Ω—ã (500 –º).\n"
                "üì° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ GPS –≤–∫–ª—é—á—ë–Ω –∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Ä—è–¥–æ–º —Å –æ—Ñ–∏—Å–æ–º.\n\n"
                "üîÅ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
                reply_markup=keyboard
            )
            # FSM –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
