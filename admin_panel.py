from aiogram import types
from loader import dp
from db import get_today_attendance
from io import BytesIO
import datetime
from aiogram.types import InputFile
from openpyxl import Workbook
from geopy.distance import distance  # –¥–æ–±–∞–≤—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install geopy

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞ (–¢—É—Ä–∫–µ—Å—Ç–∞–Ω)
WORK_LAT = 43.270355
WORK_LON = 68.285416
WORK_LOCATION = (WORK_LAT, WORK_LON)

def register(dp):
    @dp.message_handler(commands=['admin'])
    async def admin_panel(message: types.Message):
        if message.from_user.id != 6561816231:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üìä –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="report_today"))
        keyboard.add(types.InlineKeyboardButton("üì§ –°–∫–∞—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (Excel)", callback_data="export_today"))
        await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

    @dp.callback_query_handler(lambda c: c.data == "export_today")
    async def handle_export_today(callback_query: types.CallbackQuery):
        entries = get_today_attendance()
        if not entries:
            await callback_query.message.answer("üì≠ –°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è.")
            return

        wb = Workbook()
        ws = wb.active
        ws.title = "–û—Ç—á—ë—Ç"

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        ws.append(["–§–ò–û", "–í—Ä–µ–º—è", "–õ–æ–∫–∞—Ü–∏—è (‚â§500–º)", "–û–ø–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ 08:30", "–°—Ç–∞—Ç—É—Å"])

        for emp in entries:
            raw_ts = emp.get('timestamp')

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ datetime
            try:
                if isinstance(raw_ts, str):
                    dt = datetime.datetime.strptime(raw_ts, "%Y-%m-%d %H:%M:%S")
                elif isinstance(raw_ts, (int, float)):
                    dt = datetime.datetime.fromtimestamp(raw_ts)
                else:
                    dt = datetime.datetime.now()
            except Exception:
                dt = datetime.datetime.now()

            formatted_time = dt.strftime("%Y-%m-%d %H:%M:%S")

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            lat = emp.get('latitude')
            lon = emp.get('longitude')

            # –õ–æ–∫–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç—É—Å
            if lat is None or lon is None:
                location_status = "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                status = "–õ–æ–∫–∞—Ü–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
                late_status = "‚Äî"
            else:
                actual_location = (lat, lon)
                meters = distance(actual_location, WORK_LOCATION).meters
                location_ok = meters <= 500
                location_status = "–í —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ" if location_ok else "–í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞"

                # –û–ø–æ–∑–¥–∞–Ω–∏–µ
                is_late = dt.time() > datetime.time(8, 30)
                late_status = "–î–∞" if is_late else "–ù–µ—Ç"

                # –°—Ç–∞—Ç—É—Å
                if not location_ok:
                    status = "–í–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞"
                elif is_late:
                    status = "–û–ø–æ–∑–¥–∞–ª"
                else:
                    status = "–ü—Ä–∏–±—ã–ª –≤–æ–≤—Ä–µ–º—è"

            ws.append([
                emp['full_name'],
                formatted_time,
                location_status,
                late_status,
                status
            ])

        file = BytesIO()
        wb.save(file)
        file.seek(0)

        document = InputFile(file, "–û—Ç—á–µ—Ç_–∑–∞_—Å–µ–≥–æ–¥–Ω—è.xlsx")

        await callback_query.message.answer_document(
            document=document,
            caption="üì§ –í–æ—Ç Excel-–æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
        )
